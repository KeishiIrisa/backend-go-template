basePath: /
definitions:
  models.User:
    properties:
      created_at:
        example: "2023-09-06T14:00:00Z"
        type: string
      deleted_at:
        example: "2023-09-06T14:00:00Z"
        type: string
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 1
        type: integer
      last_name:
        example: Doe
        type: string
      updated_at:
        example: "2023-09-06T14:00:00Z"
        type: string
    type: object
  schemas.UserLoginSchemaIn:
    properties:
      email:
        example: string@string.com
        type: string
      password:
        example: stringstring
        maxLength: 100
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  schemas.UserSignupSchemaIn:
    properties:
      email:
        type: string
      first_name:
        example: John
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        example: Doe
        maxLength: 100
        minLength: 1
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  schemas.UserUpdateSchemaIn:
    properties:
      first_name:
        type: string
      last_name:
        type: string
    type: object
info:
  contact: {}
  description: This is a simple backend using Gin and GORM.
  title: Simple Gin Backend API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Log in by providing email and password to receive a JWT
      parameters:
      - description: User Login Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.UserLoginSchemaIn'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Log in a user
      tags:
      - Auth
  /sign-up:
    post:
      consumes:
      - application/json
      description: Create a new user by providing email and password
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.UserSignupSchemaIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Register a new user
      tags:
      - Auth
  /users/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      tags:
      - Users
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: UserUpdateSchemaIn
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/schemas.UserUpdateSchemaIn'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      tags:
      - Users
  /users/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
